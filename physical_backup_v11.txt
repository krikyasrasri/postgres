node01 - 192.168.47.252
node02 - 192.168.47.136

 
passwordless connectivity
-------------------------
 
ssh-keygen -t rsa
ssh postgres@192.168.47.252 mkdir -p .ssh
cat .ssh/id_rsa.pub | ssh postgres@192.168.47.252 'cat >> .ssh/authorized_keys'
ssh postgres@192.168.47.252 "chmod 700 .ssh; chmod 640 .ssh/authorized_keys"
ssh postgres@192.168.47.252
 
Install PostgreSQL Binaries in both the machines
------------------------------------------------ 
 
yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
yum install -y postgresql14-server
 
useradd postgres                    #creating user `postgres` for postgresql activities 
passwd postgres                     #give him password 
mkdir -p /u01/pgsql/14              #decide data directory 
chown -R postgres:postgres /u01/pgsql/14          #make postgres as owner for the directory 
su - postgres                                     #switch to postgres user 
 
/usr/local/pgsql/bin/initdb -D /u01/pgsql/14         #initialize data directory 
/usr/local/pgsql/bin/pg_ctl -D /u01/pgsql/14 start   #start data directory 
/usr/local/pgsql/bin/psql                           #login to the cluster
 
Extract Activities
--------------------
 
cd /u01/pgsql/14
tar -xf base.tar
mv pg_wal.tar pg_wal
cd pg_wal
tar -xf pg_wal.tar
rm -rf pg_wal.tar
cd ../
rm -rf base.tar
 
task 1 - backup and restore the server in remote location.
-----------------------------------------------------------
/usr/pgsql-14/bin/pg_basebackup -D /u01/pgsql/14 -Ft --checkpoint=fast -h 192.168.47.209 -v -P
 
task 2 - Restore + apply archivelogs
----------------------------------------
cd /u01/pgsql/14
touch recovery.signal
 
in postgresql.conf
restore_command = 'scp 192.168.47.149:/u01/archivelogs/%f %p'
 
task 3 - Restore + apply archivelogs + point in time recovery (postgresql.conf)
------------------------------------------------------------------
cd /u01/pgsql/14 
touch recovery.signal 
 
in postgresql.conf
------------------
restore_command = 'scp 192.168.47.149:/u01/archivelogs/%f %p'
recovery_target_lsn='0/89FF2BA8'
 
task 4 - Restore + apply archivelogs + wait for next archivelog to generate
-----------------------------------------------------------------------------
cd /u01/pgsql/14 
touch standby.signal 
 
in postgresql.conf
------------------
restore_command = 'scp 192.168.47.149:/u01/archivelogs/%f %p'
trigger_file='/tmp/postgresql.trigger.5432'
 
task 5 - Restore + get changes from wal
------------------------------------------------
cd /u01/pgsql/14 
touch standby.signal 
 
in postgresql.conf 
------------------
primary_conninfo = 'user=postgres password=postgres host=192.168.47.210 port=5432 sslmode=disable sslcompression=1'
trigger_file = '/tmp/postgresql.trigger.5434'
 
task 6 - Synchronous standby
---------------------------------
synchronous_standby_names = '*' #postgresql.conf
 
 
primary_conninfo = 'user=postgres password=postgres host=192.168.47.149 port=5432 sslmode=disable sslcompression=1'
restore_command = 'scp 192.168.47.149:/u01/archivelogs/%f %p'
trigger_file = '/tmp/postgresql.trigger.5432'
  
Task 7 - Switchover 
------------------------
pg_rewind --target-pgdata=/u01/pgsql/14 --source-server="port=5432   host=192.168.47.149" 
 
[postgres@postgres-lab]$ touch /tmp/postgresql.trigger.5432
[postgres@postgres-lab]$
 
[postgres@postgres-lab]$ pg_rewind --target-pgdata=/u01/pgsql/14 --source-server="port=5432 host=139.59.34.235"
servers diverged at WAL location 0/3018DE0 on timeline 1
no rewind required
[postgres@postgres-lab]$
Check replication lag
 

select
pid,
application_name,
pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn) sending_lag,
pg_wal_lsn_diff(sent_lsn, flush_lsn) receiving_lag,
pg_wal_lsn_diff(flush_lsn, replay_lsn) replaying_lag,
pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn) total_lag
from pg_stat_replication;

[or]

SELECT
pg_is_in_recovery() AS is_slave,
pg_last_wal_receive_lsn() AS receive,
pg_last_wal_replay_lsn() AS replay,
pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() AS synced,
(
EXTRACT(EPOCH FROM now()) â€“ EXTRACT(EPOCH FROM pg_last_xact_replay_timestamp()) )::int AS lag;